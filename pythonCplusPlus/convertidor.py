# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_convertidor', [dirname(__file__)])
        except ImportError:
            import _convertidor
            return _convertidor
        if fp is not None:
            try:
                _mod = imp.load_module('_convertidor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _convertidor = swig_import_helper()
    del swig_import_helper
else:
    import _convertidor
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Converter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Converter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Converter, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
        this = _convertidor.new_Converter(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def ecuations(self):
        return _convertidor.Converter_ecuations(self)

    def balnce_charge(self):
        return _convertidor.Converter_balnce_charge(self)

    def stateSpace(self):
        return _convertidor.Converter_stateSpace(self)

    def imprimir(self, *args):
        return _convertidor.Converter_imprimir(self, *args)
    __swig_setmethods__["Vci"] = _convertidor.Converter_Vci_set
    __swig_getmethods__["Vci"] = _convertidor.Converter_Vci_get
    if _newclass:
        Vci = _swig_property(_convertidor.Converter_Vci_get, _convertidor.Converter_Vci_set)
    __swig_setmethods__["Vco"] = _convertidor.Converter_Vco_set
    __swig_getmethods__["Vco"] = _convertidor.Converter_Vco_get
    if _newclass:
        Vco = _swig_property(_convertidor.Converter_Vco_get, _convertidor.Converter_Vco_set)
    __swig_setmethods__["I"] = _convertidor.Converter_I_set
    __swig_getmethods__["I"] = _convertidor.Converter_I_get
    if _newclass:
        I = _swig_property(_convertidor.Converter_I_get, _convertidor.Converter_I_set)
    __swig_setmethods__["RB"] = _convertidor.Converter_RB_set
    __swig_getmethods__["RB"] = _convertidor.Converter_RB_get
    if _newclass:
        RB = _swig_property(_convertidor.Converter_RB_get, _convertidor.Converter_RB_set)
    __swig_setmethods__["VB"] = _convertidor.Converter_VB_set
    __swig_getmethods__["VB"] = _convertidor.Converter_VB_get
    if _newclass:
        VB = _swig_property(_convertidor.Converter_VB_get, _convertidor.Converter_VB_set)
    __swig_setmethods__["Isc"] = _convertidor.Converter_Isc_set
    __swig_getmethods__["Isc"] = _convertidor.Converter_Isc_get
    if _newclass:
        Isc = _swig_property(_convertidor.Converter_Isc_get, _convertidor.Converter_Isc_set)
    __swig_setmethods__["Rmpp"] = _convertidor.Converter_Rmpp_set
    __swig_getmethods__["Rmpp"] = _convertidor.Converter_Rmpp_get
    if _newclass:
        Rmpp = _swig_property(_convertidor.Converter_Rmpp_get, _convertidor.Converter_Rmpp_set)
    __swig_setmethods__["Ci"] = _convertidor.Converter_Ci_set
    __swig_getmethods__["Ci"] = _convertidor.Converter_Ci_get
    if _newclass:
        Ci = _swig_property(_convertidor.Converter_Ci_get, _convertidor.Converter_Ci_set)
    __swig_setmethods__["L"] = _convertidor.Converter_L_set
    __swig_getmethods__["L"] = _convertidor.Converter_L_get
    if _newclass:
        L = _swig_property(_convertidor.Converter_L_get, _convertidor.Converter_L_set)
    __swig_setmethods__["Co"] = _convertidor.Converter_Co_set
    __swig_getmethods__["Co"] = _convertidor.Converter_Co_get
    if _newclass:
        Co = _swig_property(_convertidor.Converter_Co_get, _convertidor.Converter_Co_set)
    __swig_setmethods__["D"] = _convertidor.Converter_D_set
    __swig_getmethods__["D"] = _convertidor.Converter_D_get
    if _newclass:
        D = _swig_property(_convertidor.Converter_D_get, _convertidor.Converter_D_set)
    __swig_setmethods__["Ron"] = _convertidor.Converter_Ron_set
    __swig_getmethods__["Ron"] = _convertidor.Converter_Ron_get
    if _newclass:
        Ron = _swig_property(_convertidor.Converter_Ron_get, _convertidor.Converter_Ron_set)
    __swig_setmethods__["Rl"] = _convertidor.Converter_Rl_set
    __swig_getmethods__["Rl"] = _convertidor.Converter_Rl_get
    if _newclass:
        Rl = _swig_property(_convertidor.Converter_Rl_get, _convertidor.Converter_Rl_set)
    __swig_setmethods__["A"] = _convertidor.Converter_A_set
    __swig_getmethods__["A"] = _convertidor.Converter_A_get
    if _newclass:
        A = _swig_property(_convertidor.Converter_A_get, _convertidor.Converter_A_set)
    __swig_setmethods__["B"] = _convertidor.Converter_B_set
    __swig_getmethods__["B"] = _convertidor.Converter_B_get
    if _newclass:
        B = _swig_property(_convertidor.Converter_B_get, _convertidor.Converter_B_set)
    __swig_setmethods__["C"] = _convertidor.Converter_C_set
    __swig_getmethods__["C"] = _convertidor.Converter_C_get
    if _newclass:
        C = _swig_property(_convertidor.Converter_C_get, _convertidor.Converter_C_set)
    __swig_setmethods__["D1"] = _convertidor.Converter_D1_set
    __swig_getmethods__["D1"] = _convertidor.Converter_D1_get
    if _newclass:
        D1 = _swig_property(_convertidor.Converter_D1_get, _convertidor.Converter_D1_set)
    __swig_destroy__ = _convertidor.delete_Converter
    __del__ = lambda self: None
Converter_swigregister = _convertidor.Converter_swigregister
Converter_swigregister(Converter)

# This file is compatible with both classic and new-style classes.


